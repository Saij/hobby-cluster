#!/usr/bin/env bash
# {{ ansible_managed }}
set -euo pipefail

# --- Static Configuration from Ansible ---
ETCD_NAME="{{ etcd_name }}"
INTERNAL_IP="{{ internal_ip }}"
PEER_PORT="{{ etcd.ports.peers | default('2380') }}"
CLIENT_PORT="{{ etcd.ports.clients | default('2379') }}"
CLUSTER_EXISTS="{{ 'true' if etcd_existing_nodes | length > 0 else 'false' }}"

ETCD_ENDPOINTS="{{ etcd_existing_nodes
  | map('extract', hostvars, 'internal_ip')
  | map('regex_replace', '^(.*)$', 'http://\\1:' ~ (etcd.ports.clients | default('2379')))
  | join(',') }}"

ETCDCTL_API=3

ETCD_DATA_DIR="/var/lib/etcd"
ETCD_BINARY="/opt/etcd/etcd"
ETCDCTL_BINARY="/opt/etcd/etcdctl"

PEER_URL="http://${INTERNAL_IP}:${PEER_PORT}"
CLIENT_URL="http://${INTERNAL_IP}:${CLIENT_PORT}"

log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] $*"; }

# --- Check etcdctl binary presence ---
if ! command -v "$ETCDCTL_BINARY" >/dev/null 2>&1; then
  log "‚ùå etcdctl not found at $ETCDCTL_BINARY"
  exit 1
fi

ETCD_CMD_BASE=(
  "$ETCD_BINARY"
  --name "$ETCD_NAME"
  --data-dir "$ETCD_DATA_DIR"
  --heartbeat-interval 200
  --election-timeout 5000
  --listen-peer-urls "${PEER_URL},http://127.0.0.1:${PEER_PORT}"
  --listen-client-urls "${CLIENT_URL},http://127.0.0.1:${CLIENT_PORT}"
  --advertise-client-urls "$CLIENT_URL"
)

ETCD_CMD_JOIN=()

DATA_DIR_EXISTS=false

if [ -d "${ETCD_DATA_DIR}/member" ]; then
  DATA_DIR_EXISTS=true
  log "üìÇ Data directory exists. Verifying cluster membership..."

  if [[ "$CLUSTER_EXISTS" == "true" ]]; then
    if [[ -z "${ETCD_ENDPOINTS}" ]]; then
      log "‚ùå Cluster exists, but no valid endpoints defined. Cannot verify membership."
      exit 1
    fi

    if [[ "$ETCD_ENDPOINTS" == *"${INTERNAL_IP}"* ]]; then
      log "‚ÑπÔ∏è Skipping membership check ‚Äî would query self. Assuming already initialized."
    elif $ETCDCTL_BINARY \
        --endpoints="${ETCD_ENDPOINTS}" \
        --dial-timeout=3s \
        --command-timeout=5s \
        member list | grep -Eq "name=${ETCD_NAME}|${PEER_URL}"; then
      log "‚úÖ Node is already a cluster member. Will start with base config only."
    else
      log "‚ö†Ô∏è Data directory exists but node is not a cluster member. Cleaning up..."
      rm -rf "${ETCD_DATA_DIR:?}/"*
      DATA_DIR_EXISTS=false
    fi
  fi
fi

# --- Joining or bootstrapping ---
if [ "$DATA_DIR_EXISTS" == "false" ]; then
  if [[ "$CLUSTER_EXISTS" == "true" ]]; then
    if [[ -z "${ETCD_ENDPOINTS}" ]]; then
      log "‚ùå Cluster exists, but no valid endpoints defined. Cannot join."
      exit 1
    fi

    log "‚ûï Cluster exists. Registering this node as a member..."

    ADD_OUTPUT=$($ETCDCTL_BINARY \
      --endpoints="${ETCD_ENDPOINTS}" \
      --dial-timeout=3s \
      --command-timeout=5s \
      member add "$ETCD_NAME" \
      --peer-urls="$PEER_URL")

    log "$ADD_OUTPUT"
    eval "$(echo "$ADD_OUTPUT" | awk '/^ETCD_/')"

    if [[ -z "${ETCD_INITIAL_CLUSTER:-}" ]]; then
      log "‚ùå Failed to extract ETCD_INITIAL_CLUSTER from member add output."
      exit 1
    fi

    ETCD_CMD_JOIN+=(
      --initial-advertise-peer-urls "$ETCD_INITIAL_ADVERTISE_PEER_URLS"
      --initial-cluster "$ETCD_INITIAL_CLUSTER"
      --initial-cluster-state "$ETCD_INITIAL_CLUSTER_STATE"
    )
  else
    log "üß® No cluster exists. Bootstrapping new cluster..."

    ETCD_CMD_JOIN+=(
      --initial-advertise-peer-urls "$PEER_URL"
      --initial-cluster="{{ etcd_peers }}"
      --initial-cluster-state "new"
    )
  fi
else
  ETCD_CMD_JOIN+=(
    --initial-advertise-peer-urls "$PEER_URL"
    --initial-cluster="{{ etcd_peers }}"
    --initial-cluster-state "existing"
  )
fi

log "üöÄ Starting etcd..."
exec "${ETCD_CMD_BASE[@]}" "${ETCD_CMD_JOIN[@]}"
